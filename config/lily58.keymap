/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <600>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

&sl {
    release-after-ms = <600>;

    /delete-property/ quick-release;
};

/ {
    macros {
        php_open: php_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp QMARK &kp P &kp H &kp P &kp RET>;
            label = "PHP_OPEN";
        };

        single_arrow: single_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "SINGLE_ARROW";
        };

        double_arrow: double_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "DOUBLE_ARROW";
        };

        function: function {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N &kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "FUNCTION";
        };

        php_echo: php_echo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp QMARK &kp EQUAL &kp SPACE>;
            label = "PHP_ECHO";
        };

        php_close: php_close {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QMARK &kp GT>;
            label = "PHP_CLOSE";
        };

        template_output: template_output {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp LEFT_BRACE &kp SPACE &kp SPACE &kp RBRC &kp RBRC &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT>;
            label = "TEMPLATE_OUTPUT";
        };
    };

    combos {
        compatible = "zmk,combos";

        tilde_grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        lh_backspace_delete {
            bindings = <&backspace_delete>;
            key-positions = <10 11>;
            layers = <0>;
        };

        lh_6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <17 16>;
            layers = <0>;
        };

        rh_open_curly_brackets {
            bindings = <&morph_curly_brackets>;
            key-positions = <19 31>;
        };

        rh_open_paren {
            bindings = <&morph_parens>;
            key-positions = <30 31>;
        };

        lh_open_sqr_bracket {
            bindings = <&morph_sqr_brackets>;
            key-positions = <44 45>;
        };

        rh_caret {
            bindings = <&kp CARET>;
            key-positions = <18 30>;
        };

        lh_dollar {
            bindings = <&kp DLLR>;
            key-positions = <16 28>;
        };

        backslash_pipe {
            bindings = <&kp BACKSLASH>;
            key-positions = <23 35>;
        };

        pcnt {
            bindings = <&kp PERCENT>;
            key-positions = <29 17>;
        };
    };

    behaviors {
        leftHand_hr_mt: leftHand_hr_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTHAND_HR_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <225>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 18 30 44 43 54 55 56 57 7 8 9 19 20 21 31 32 33 45 46 47 10 11 22 23 34 35 48 49>;
            hold-trigger-on-release;
            require-prior-idle-ms = <185>;
        };

        rightHand_hr_mt: rightHand_hr_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTHAND_HR_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <225>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <185>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53>;
        };

        leftHand_hr_mt_shift: leftHand_hr_mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTHAND_HR_MT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <225>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 18 30 44 43 54 55 56 57 7 8 9 19 20 21 31 32 33 45 46 47 10 11 22 23 34 35 48 49>;
            hold-trigger-on-release;
            require-prior-idle-ms = <135>;
        };

        rightHand_hr_mt_shift: rightHand_hr_mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTHAND_HR_MT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <225>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <135>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_lshift_capsword: td_lshift_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LSHIFT_CAPSWORD";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;

            tapping-term-ms = <275>;
        };

        left_up: left_up {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_UP";
            bindings = <&kp LEFT>, <&kp UP_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_down: right_down {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_DOWN";
            bindings = <&kp RIGHT>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tap_dance_toggle_numbers: tap_dance_toggle_numbers {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_TOGGLE_NUMBERS";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 1>, <&to 1>;

            tapping-term-ms = <275>;
        };

        th_layer_shift_capsword: th_layer_shift_capsword {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_LAYER_SHIFT_CAPSWORD";
            bindings = <&mo>, <&td_lshift_capsword>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        morph_sing_dbl_arrow: morph_sing_dbl_arrow {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SING_DBL_ARROW";
            bindings = <&single_arrow>, <&double_arrow>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        th_arrow_layer: th_arrow_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_ARROW_LAYER";
            bindings = <&mo>, <&morph_sing_dbl_arrow>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
        };

        morph_parens: morph_parens {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_PARENS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_sqr_brackets: morph_sqr_brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SQR_BRACKETS";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_curly_brackets: morph_curly_brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_CURLY_BRACKETS";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tap_skshift_td_cword_hkpshift: tap_skshift_td_cword_hkpshift {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_SKSHIFT_TD_CWORD_HKPSHIFT";
            bindings = <&kp>, <&td_lshift_capsword>;

            #binding-cells = <2>;
            tapping-term-ms = <179>;
            flavor = "tap-preferred";
        };

        php_open_close: php_open_close {
            compatible = "zmk,behavior-mod-morph";
            label = "PHP_OPEN_CLOSE";
            bindings = <&php_open>, <&php_close>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        php_echo_close: php_echo_close {
            compatible = "zmk,behavior-mod-morph";
            label = "PHP_ECHO_CLOSE";
            bindings = <&php_echo>, <&php_close>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tap_dance_capslock: tap_dance_capslock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CAPSLOCK";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;

            tapping-term-ms = <230>;
        };

        td_morph_sqr_brkt: td_morph_sqr_brkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MORPH_SQR_BRKT";
            #binding-cells = <0>;
            bindings = <&morph_sqr_brackets>, <&kp RIGHT_BRACKET>;
        };

        td_morph_curly_brkt: td_morph_curly_brkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MORPH_CURLY_BRKT";
            #binding-cells = <0>;
            bindings = <&morph_curly_brackets>, <&kp RIGHT_BRACE>;
        };

        td_morph_parens: td_morph_parens {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MORPH_PARENS";
            #binding-cells = <0>;
            bindings = <&morph_parens>, <&kp RIGHT_PARENTHESIS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp ESC              &kp N1                      &kp N2                   &kp N3                      &kp N4                          &kp N5                                                        &kp N6   &kp N7                                &kp N8                   &kp N9                    &kp N0                                &kp EQUAL
&kp TAB              &kp Q                       &kp W                    &kp E                       &kp R                           &kp T                                                         &kp Y    &kp U                                 &kp I                    &kp O                     &kp P                                 &kp MINUS
&kp LCTRL            &leftHand_hr_mt LEFT_ALT A  &leftHand_hr_mt LCTRL S  &leftHand_hr_mt LEFT_GUI D  &leftHand_hr_mt_shift LSHIFT F  &kp G                                                         &kp H    &rightHand_hr_mt_shift RIGHT_SHIFT J  &rightHand_hr_mt RGUI K  &rightHand_hr_mt RCTRL L  &rightHand_hr_mt RIGHT_ALT SEMICOLON  &kp SQT
&tap_dance_capslock  &kp Z                       &kp X                    &kp C                       &kp V                           &kp B       &tap_dance_toggle_numbers    &th_arrow_layer 2 0  &kp N    &kp M                                 &kp COMMA                &kp DOT                   &kp FSLH                              &kp ENTER
                                                                          &left_up                    &mo 3                           &kp LSHIFT  &backspace_delete            &kp SPACE            &kp RET  &left_up                              &right_down
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        numbers_media {
            bindings = <
&kp LC(LG(Q))  &trans  &trans  &trans  &trans  &kp LC(LA(LS(F12)))                               &kp C_PREVIOUS  &kp C_NEXT  &kp C_PP  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp BSPC
&trans         &trans  &trans  &trans  &trans  &trans                                            &kp LS(C_MUTE)  &kp N7      &kp N8    &kp N9             &kp LG(LEFT)     &kp LG(RIGHT_ARROW)
&trans         &trans  &trans  &trans  &trans  &trans                                            &kp PLUS        &kp N4      &kp N5    &kp N6             &kp STAR         &kp ENTER
&trans         &trans  &trans  &trans  &trans  &trans               &trans    &to 0              &kp MINUS       &kp N1      &kp N2    &kp N3             &kp SLASH        &kp ENTER
                               &trans  &trans  &trans               &trans    &backspace_delete  &kp N0          &kp N0      &kp DOT
            >;
        };

        navigation {
            bindings = <
&kp LC(LG(Q))   &trans        &trans    &trans                  &trans                   &kp HOME                                       &kp C_PREVIOUS  &kp C_NEXT  &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &to 4
&trans          &trans        &kp UP    &kp LS(LG(LEFT_BRACE))  &kp LG(LS(RIGHT_BRACE))  &kp PAGE_UP                                    &kp C_MUTE      &trans      &trans            &trans             &trans           &trans
&trans          &kp LEFT      &kp DOWN  &kp RIGHT               &trans                   &kp PAGE_DOWN                                  &trans          &kp RSHIFT  &kp RIGHT_GUI     &kp RCTRL          &kp RIGHT_ALT    &trans
&kp LEFT_SHIFT  &kp LG(LEFT)  &trans    &kp LG(RIGHT)           &trans                   &kp END        &kp LSHIFT           &trans     &trans          &trans      &trans            &trans             &trans           &trans
                                        &trans                  &trans                   &trans         &backspace_delete    &kp SPACE  &trans          &trans      &trans
            >;
        };

        programming {
            bindings = <
&kp LS(LG(GRAVE))  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LS(LC(LG(NUMBER_4)))  &kp LG(N5)                    &php_open_close   &php_echo_close       &trans                 &trans                &trans            &kp BACKSPACE
&kp LG(GRAVE)      &kp LG(Q)         &kp LG(W)         &kp LG(E)         &kp LS(LG(R))             &kp RG(T)                     &function         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans                &trans            &kp PIPE
&kp CAPS           &kp LG(A)         &kp LG(S)         &kp LG(D)         &kp LG(F)                 &kp LG(G)                     &kp LEFT_BRACE    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RIGHT_BRACE       &kp SEMICOLON     &kp NON_US_BACKSLASH
&kp LCTRL          &kp LG(Z)         &kp LG(X)         &kp LG(C)         &kp LG(V)                 &kp LG(B)   &trans    &trans  &template_output  &trans                &kp LS(LESS_THAN)      &kp LS(GREATER_THAN)  &kp LS(QUESTION)  &kp ENTER
                                                       &kp LEFT_ALT      &trans                    &trans      &trans    &trans  &trans            &left_up              &right_down
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Lower";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans           &trans    &trans    &to 0
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9           &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC  &kp PIPE
                                        &trans        &trans        &trans        &to 0     &to 0   &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Raise";
            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                     &trans       &trans     &trans     &trans    &trans     &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                     &kp N6       &kp N7     &kp N8     &kp N9    &kp N0     &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &trans       &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
                           &trans   &trans   &trans   &trans    &trans  &trans       &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
