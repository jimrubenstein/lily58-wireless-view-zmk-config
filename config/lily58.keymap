/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <600>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

&sl {
    release-after-ms = <600>;

    /delete-property/ quick-release;
};

/ {
    macros {
        php_open: php_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp QMARK &kp P &kp H &kp P &kp RET>;
            label = "PHP_OPEN";
        };

        single_arrow: single_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "SINGLE_ARROW";
        };

        double_arrow: double_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "DOUBLE_ARROW";
        };

        function: function {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N &kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "FUNCTION";
        };
    };

    combos {
        compatible = "zmk,combos";

        tilde_grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        lh_backspace_delete {
            bindings = <&backspace_delete>;
            key-positions = <10 11>;
            layers = <0>;
        };

        lh_6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <16 17>;
            layers = <0>;
        };

        rh_pinky_enter {
            bindings = <&kp ENTER>;
            key-positions = <35 34>;
        };

        lh_open_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <31 45>;
        };

        lh_close_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <32 46>;
        };

        lh_open_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <19 31>;
        };

        lh_close_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <20 32>;
        };

        lh_open_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <30 18>;
        };

        lh_close_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 21>;
        };

        lh_single_arrow {
            bindings = <&single_arrow>;
            key-positions = <30 44>;
        };

        lh_double_arrow {
            bindings = <&double_arrow>;
            key-positions = <47 33>;
        };

        rh_caret {
            bindings = <&kp CARET>;
            key-positions = <18 6>;
        };

        lh_dollar {
            bindings = <&kp DLLR>;
            key-positions = <16 28>;
        };

        lh_exclamation {
            bindings = <&kp EXCL>;
            key-positions = <13 25>;
        };

        lh_percent {
            bindings = <&kp PRCNT>;
            key-positions = <29 17>;
        };
    };

    behaviors {
        leftHand_hr_mt: leftHand_hr_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTHAND_HR_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <195>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 18 30 44 43 54 55 56 57 7 8 9 19 20 21 31 32 33 45 46 47 10 11 22 23 34 35 48 49>;
            hold-trigger-on-release;
            require-prior-idle-ms = <120>;
        };

        rightHand_hr_mt: rightHand_hr_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTHAND_HR_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <195>;
            quick-tap-ms = <250>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <120>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53>;
        };

        leftHand_hr_mt_shift: leftHand_hr_mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTHAND_HR_MT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            quick-tap-ms = <225>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <6 18 30 44 43 54 55 56 57 7 8 9 19 20 21 31 32 33 45 46 47 10 11 22 23 34 35 48 49>;
            hold-trigger-on-release;
            require-prior-idle-ms = <120>;
        };

        rightHand_hr_mt_shift: rightHand_hr_mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTHAND_HR_MT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <195>;
            quick-tap-ms = <225>;
            flavor = "hold-preferred";
            hold-trigger-on-release;
            require-prior-idle-ms = <120>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_lshift_capsword: td_lshift_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LSHIFT_CAPSWORD";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp ESC              &kp N1                      &kp N2                       &kp N3                      &kp N4                          &kp N5                                  &kp N6     &kp N7                                &kp N8                   &kp N9                    &kp N0                                &kp EQUAL
&kp TAB              &kp Q                       &kp W                        &kp E                       &kp R                           &kp T                                   &kp Y      &kp U                                 &kp I                    &kp O                     &kp P                                 &kp MINUS
&kp LCTRL            &leftHand_hr_mt LEFT_ALT A  &leftHand_hr_mt LA(LCTRL) S  &leftHand_hr_mt LEFT_GUI D  &leftHand_hr_mt_shift LSHIFT F  &kp G                                   &kp H      &rightHand_hr_mt_shift RIGHT_SHIFT J  &rightHand_hr_mt RGUI K  &rightHand_hr_mt RCTRL L  &rightHand_hr_mt RIGHT_ALT SEMICOLON  &kp SQT
&td_lshift_capsword  &kp Z                       &kp X                        &kp C                       &kp V                           &kp B   &mo 1                &mo 2      &kp N      &kp M                                 &kp COMMA                &kp DOT                   &kp FSLH                              &kp RSHFT
                                                                              &kp LALT                    &kp LGUI                        &mo 3   &backspace_delete    &kp SPACE  &kp ENTER  &kp LEFT                              &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        numbers_media {
            bindings = <
&kp LC(LG(Q))  &trans  &trans  &kp LC(LS(LG(NUMBER_4)))  &trans  &trans                       &kp C_PREVIOUS  &kp C_NEXT    &kp C_PP  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp BSPC
&trans         &trans  &trans  &trans                    &trans  &trans                       &kp LS(STAR)    &kp N7        &kp N8    &kp N9             &trans           &trans
&trans         &trans  &trans  &trans                    &trans  &trans                       &kp FSLH        &kp N4        &kp N5    &kp N6             &kp RET          &trans
&trans         &trans  &trans  &trans                    &trans  &trans  &trans    &trans     &kp MINUS       &kp N1        &kp N2    &kp N3             &kp EQUAL        &trans
                               &trans                    &trans  &trans  &trans    &kp SPACE  &kp N0          &kp LS(PLUS)  &kp DOT
            >;
        };

        navigation {
            bindings = <
&kp LC(LG(Q))     &trans    &trans    &trans     &kp LS(LC(LG(NUMBER_4)))  &kp HOME                               &trans  &trans  &trans  &trans  &trans  &to 4
&trans            &trans    &kp UP    &trans     &trans                    &kp PAGE_UP                            &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_CONTROL  &kp LEFT  &kp DOWN  &kp RIGHT  &trans                    &kp PAGE_DOWN                          &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT    &trans    &trans    &trans     &trans                    &kp END        &kp LSHIFT      &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans     &kp LCTRL                 &kp LALT       &kp LEFT_GUI    &trans  &trans  &trans  &trans
            >;
        };

        programming {
            bindings = <
&trans    &trans  &trans  &trans  &kp LS(LC(LG(NUMBER_4)))  &trans                           &php_open      &trans        &trans          &trans      &trans         &kp BACKSPACE
&trans    &trans  &trans  &trans  &kp LS(LG(R))             &trans                           &function      &kp LS(LBRC)  &kp LS(RBRC)    &trans      &trans         &kp PIPE
&kp CAPS  &trans  &trans  &trans  &trans                    &trans                           &kp LS(DLLR)   &kp LS(LPAR)  &kp LS(RPAR)    &trans      &kp SEMICOLON  &kp SQT
&trans    &trans  &trans  &trans  &trans                    &trans  &trans    &double_arrow  &single_arrow  &kp LBKT      &kp RBKT        &kp LS(LT)  &kp LS(GT)     &kp EQUAL
                          &trans  &trans                    &trans  &trans    &kp SPACE      &kp ENTER      &kp UP_ARROW  &kp DOWN_ARROW
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Lower";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans           &trans    &trans    &trans
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9           &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC  &kp PIPE
                                        &trans        &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Raise";
            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                     &trans       &trans     &trans     &trans    &trans     &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                     &kp N6       &kp N7     &kp N8     &kp N9    &kp N0     &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &trans       &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
                           &trans   &trans   &trans   &trans    &trans  &trans       &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
